const { order: Order } = require('../model/model');

// üìå T·∫°o ƒë∆°n h√†ng (L∆∞u v√†o MongoDB tr∆∞·ªõc khi g·ªçi MoMo)
const createOrder = async (req, res) => {
  try {
    const { cartItems, customerInfo, amount, payment } = req.body;

    // Validate gi·ªè h√†ng
    if (!Array.isArray(cartItems) || cartItems.length === 0) {
      return res.status(400).json({ message: 'Gi·ªè h√†ng tr·ªëng' });
    }

    // Validate th√¥ng tin kh√°ch h√†ng
    if (!customerInfo?.name || !customerInfo?.phone) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin kh√°ch h√†ng (t√™n, s·ªë ƒëi·ªán tho·∫°i)' });
    }

    // T·∫°o m√£ ƒë∆°n h√†ng ri√™ng (d√πng cho MoMo ho·∫∑c qu·∫£n l√Ω)
    const orderCode = 'ORD-' + Date.now();

    const newOrder = await Order.create({
      orderId: orderCode, // m√£ ƒë∆°n h√†ng ri√™ng
      cartItems,
      customerInfo,
      amount,
      payment: payment || 'momo',
      status: 'pending',
      createdAt: new Date()
    });

    res.status(201).json(newOrder);

  } catch (err) {
    console.error('‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:', err);
    res.status(500).json({ message: 'L·ªói khi t·∫°o ƒë∆°n h√†ng: ' + err.message });
  }
};

// üìå L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
const getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find()
      .populate({
        path: 'cartItems.productId',
        select: 'name price category',
        populate: { path: 'category', select: 'name' }
      })
      .sort({ createdAt: -1 });

    res.status(200).json(orders);
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng:', err);
    res.status(500).json({ message: 'L·ªói server: ' + err.message });
  }
};

// üìå L·∫•y ƒë∆°n h√†ng theo orderId (m√£ ƒë∆°n h√†ng ri√™ng)
const getOrderById = async (req, res) => {
  try {
    const order = await Order.findOne({ orderId: req.params.id })
      .populate({
        path: 'cartItems.productId',
        select: 'name price category',
        populate: { path: 'category', select: 'name' }
      });

    if (!order) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    res.status(200).json(order);
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng:', err);
    res.status(500).json({ message: 'L·ªói: ' + err.message });
  }
};

// üìå C·∫≠p nh·∫≠t ƒë∆°n h√†ng (vd: sau khi thanh to√°n th√†nh c√¥ng)
const updateOrder = async (req, res) => {
  try {
    const updatedOrder = await Order.findOneAndUpdate(
      { orderId: req.params.id },
      req.body,
      { new: true }
    ).populate({
      path: 'cartItems.productId',
      select: 'name price category',
      populate: { path: 'category', select: 'name' }
    });

    if (!updatedOrder) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t' });
    }

    res.status(200).json(updatedOrder);
  } catch (err) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:', err);
    res.status(500).json({ message: 'L·ªói: ' + err.message });
  }
};

// üìå Xo√° ƒë∆°n h√†ng
const deleteOrder = async (req, res) => {
  try {
    const deletedOrder = await Order.findOneAndDelete({ orderId: req.params.id });

    if (!deletedOrder) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë·ªÉ xo√°' });
    }

    res.status(200).json({ message: 'Xo√° ƒë∆°n h√†ng th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói khi xo√° ƒë∆°n h√†ng:', err);
    res.status(500).json({ message: 'L·ªói: ' + err.message });
  }
};

// üìå Th·ªëng k√™ doanh thu theo category
const getRevenueByCategory = async (req, res) => {
  try {
    const revenue = await Order.aggregate([
      { $unwind: "$cartItems" },
      {
        $lookup: {
          from: 'products',
          localField: 'cartItems.productId',
          foreignField: '_id',
          as: 'product'
        }
      },
      { $unwind: '$product' },
      {
        $lookup: {
          from: 'categories',
          localField: 'product.category',
          foreignField: '_id',
          as: 'category'
        }
      },
      { $unwind: '$category' },
      {
        $group: {
          _id: '$category._id',
          categoryName: { $first: '$category.name' },
          totalRevenue: { $sum: { $multiply: ['$cartItems.price', '$cartItems.quantity'] } },
          totalOrders: { $sum: 1 }
        }
      },
      { $sort: { totalRevenue: -1 } }
    ]);

    res.status(200).json(revenue);
  } catch (err) {
    console.error('‚ùå L·ªói khi th·ªëng k√™ doanh thu:', err);
    res.status(500).json({ message: 'L·ªói server: ' + err.message });
  }
};

module.exports = {
  createOrder,
  getAllOrders,
  getOrderById,
  updateOrder,
  deleteOrder,
  getRevenueByCategory
};
