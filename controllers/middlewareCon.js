const jwt = require("jsonwebtoken");

const middlewareCon = {
  verifyToken: (req, res, next) => {
    const authHeader = req.headers.authorization;

    if (authHeader && authHeader.startsWith("Bearer ")) {
      const token = authHeader.split(" ")[1];

      jwt.verify(token, process.env.ACCESS_TOKEN, (err, decoded) => {
        if (err) {
          return res.status(403).json({ message: "Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá" });
        }

        // ‚úÖ G·∫Øn payload v√†o req.user
        req.user = {
          id: decoded.id || decoded._id, // üëà b·∫£o ƒë·∫£m lu√¥n c√≥ id
          admin: decoded.admin || false
        };

        console.log("‚úÖ Token decode:", req.user); // debug
        next();
      });
    } else {
      res.status(401).json({ message: "Ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c" });
    }
  },

  verifyTokenAndAdminAuth: (req, res, next) => {
    middlewareCon.verifyToken(req, res, () => {
      if (req.user.id === req.params.id || req.user.admin) {
        next();
      } else {
        res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y" });
      }
    });
  },

  isAdmin: (req, res, next) => {
    middlewareCon.verifyToken(req, res, () => {
      if (req.user && req.user.admin) {
        next();
      } else {
        res.status(403).json({ message: "Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán thao t√°c n√†y" });
      }
    });
  }
};

module.exports = middlewareCon;
