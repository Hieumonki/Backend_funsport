const { theme, author, category } = require("../model/model");

const categoryCon = {
  // Th√™m danh m·ª•c
  addcategory: async (req, res) => {
    try {
      const data = req.body;

      console.log("üî• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", data);

      // Xo√° _id n·∫øu l√† chu·ªói r·ªóng ho·∫∑c null
      if (!data._id || data._id === "") {
        delete data._id;
      }

      const newcategory = new category(data);
      const savecategory = await newcategory.save();

      // N·∫øu c√≥ author th√¨ th√™m tham chi·∫øu
      if (data.author) {
        const authorData = await author.findById(data.author);
        if (authorData) {
          authorData.category.push(savecategory._id);
          await authorData.save();
        }
      }

      res.status(200).json(savecategory);
    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m category:", error);
      if (error.code === 11000) {
        res.status(400).json({ message: "M√£ danh m·ª•c ƒë√£ t·ªìn t·∫°i!" });
      } else {
        res.status(500).json({ message: error.message || "L·ªói m√°y ch·ªß." });
      }
    }
  },

  // L·∫•y t·∫•t c·∫£ danh m·ª•c
  getAllcategory: async (req, res) => {
    try {
      const categorys = await category.find();
      res.status(200).json(categorys);
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ danh m·ª•c:", error);
      res.status(500).json({ message: error.message || "L·ªói m√°y ch·ªß." });
    }
  },

  // L·∫•y m·ªôt danh m·ª•c theo ID
  getAncategory: async (req, res) => {
    try {
      const categorys = await category.findById(req.params.id);
      res.status(200).json(categorys);
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y danh m·ª•c:", error);
      res.status(500).json({ message: error.message || "L·ªói m√°y ch·ªß." });
    }
  },

  // C·∫≠p nh·∫≠t danh m·ª•c
  updatecategory: async (req, res) => {
    try {
      const categoryToUpdate = await category.findById(req.params.id);
      if (!categoryToUpdate) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c." });
      }

      await categoryToUpdate.updateOne({ $set: req.body });
      res.status(200).json("C·∫≠p nh·∫≠t th√†nh c√¥ng.");
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c:", error);
      res.status(500).json({ message: error.message || "L·ªói m√°y ch·ªß." });
    }
  },

  // X√≥a danh m·ª•c
  deletecategory: async (req, res) => {
    try {
      const deleted = await category.findByIdAndDelete(req.params.id);
      if (!deleted) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c ƒë·ªÉ xo√°." });
      }

      res.status(200).json("Xo√° th√†nh c√¥ng.");
    } catch (error) {
      console.error("‚ùå L·ªói khi xo√° danh m·ª•c:", error);
      res.status(500).json({ message: error.message || "L·ªói m√°y ch·ªß." });
    }
  },

  // L·∫•y t·∫•t c·∫£ category c√≥ status === 'active' (d√†nh cho user)
  getActiveCategories: async (req, res) => {
    try {
      const categories = await category.find({ status: 'active' });
      res.status(200).json(categories);
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y danh m·ª•c active:", error);
      res.status(500).json({ message: error.message || "L·ªói m√°y ch·ªß." });
    }
  }
};

module.exports = categoryCon;
