const Cart = require("../model/cart");
const { product: Product } = require("../model/model");

// ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè
const addToCart = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res
        .status(401)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const userId = req.user.id;
    const { productId, size, color, quantity } = req.body;

    if (!productId || !color) {
      return res
        .status(400)
        .json({ message: "Thi·∫øu productId / color (size c√≥ th·ªÉ b·ªè tr·ªëng)" });
    }

    const qty = Number(quantity) || 1;
    if (qty <= 0) {
      return res.status(400).json({ message: "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá" });
    }

    let cart = await Cart.findOne({ userId });
    if (!cart) {
      cart = new Cart({ userId, items: [], total: 0 });
    }

    // üîç L·∫•y s·∫£n ph·∫©m & variant
    const productData = await Product.findById(productId);
    if (!productData) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    // ‚úÖ T√¨m variant theo color (v√† size n·∫øu c√≥)
    const variant = productData.variants.find((v) => {
      if (v.size) {
        return v.size === size && v.color === color;
      }
      return v.color === color;
    });

    if (!variant) {
      return res.status(400).json({ message: "Bi·∫øn th·ªÉ kh√¥ng t·ªìn t·∫°i" });
    }

    if (variant.price === undefined || variant.price === null) {
      return res.status(400).json({ message: "Bi·∫øn th·ªÉ ch∆∞a c√≥ gi√° b√°n" });
    }

    // üîÑ Ki·ªÉm tra item t·ªìn t·∫°i
    const existing = cart.items.find(
      (item) =>
        item.productId.toString() === productId &&
        item.color === color &&
        (item.size || "") === (size || "")
    );

    if (existing) {
      existing.quantity += qty;
      existing.price = Number(variant.price);
      if (existing.quantity <= 0) {
        cart.items = cart.items.filter((i) => i !== existing);
      }
    } else {
      cart.items.push({
        productId,
        size: size || null,
        color,
        quantity: qty,
        price: Number(variant.price),
      });
    }

    cart.total = calculateCartTotal(cart.items);
    await cart.save();

    const populated = await Cart.findById(cart._id).populate("items.productId");
    console.log("üõí Cart sau khi th√™m:", JSON.stringify(cart.items, null, 2));

    res.status(201).json(populated);
  } catch (err) {
    console.error("‚ùå L·ªói addToCart:", err);
    res
      .status(500)
      .json({ message: "L·ªói server khi th√™m gi·ªè h√†ng", error: err.message });
  }
};

// üì¶ L·∫•y gi·ªè h√†ng
const getCart = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res
        .status(401)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const userId = req.user.id;
    const cart = await Cart.findOne({ userId }).populate("items.productId");
    if (!cart) return res.json({ items: [], total: 0 });

    res.json(cart);
  } catch (err) {
    console.error("‚ùå L·ªói getCart:", err);
    res
      .status(500)
      .json({ message: "L·ªói server khi l·∫•y gi·ªè h√†ng", error: err.message });
  }
};

// ‚ùå Xo√° s·∫£n ph·∫©m
const removeFromCart = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res
        .status(401)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const userId = req.user.id;
    const { productId, size, color } = req.body;

    let cart = await Cart.findOne({ userId });
    if (!cart) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    cart.items = cart.items.filter(
      (item) =>
        !(
          item.productId.toString() === productId &&
          item.color === color &&
          (item.size || "") === (size || "")
        )
    );

    cart.total = calculateCartTotal(cart.items);
    await cart.save();

    const populated = await Cart.findById(cart._id).populate("items.productId");
    res.json(populated || { items: [], total: 0 });
  } catch (err) {
    console.error("‚ùå L·ªói removeFromCart:", err);
    res
      .status(500)
      .json({ message: "L·ªói server khi xo√° s·∫£n ph·∫©m", error: err.message });
  }
};

// ‚ûñ Gi·∫£m s·ªë l∆∞·ª£ng
const decreaseFromCart = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res
        .status(401)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const userId = req.user.id;
    const { productId, size, color } = req.body;

    let cart = await Cart.findOne({ userId }).populate("items.productId");
    if (!cart) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });

    const itemIndex = cart.items.findIndex(
      (item) =>
        item.productId._id.toString() === productId &&
        item.color === color &&
        (item.size || "") === (size || "")
    );

    if (itemIndex === -1) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè" });
    }

    if (cart.items[itemIndex].quantity > 1) {
      cart.items[itemIndex].quantity -= 1;
    } else {
      cart.items.splice(itemIndex, 1);
    }

    cart.total = calculateCartTotal(cart.items);
    await cart.save();

    const populated = await Cart.findById(cart._id).populate("items.productId");
    res.json(populated || { items: [], total: 0 });
  } catch (err) {
    console.error("‚ùå L·ªói decreaseFromCart:", err);
    res.status(500).json({
      message: "L·ªói server khi gi·∫£m s·ªë l∆∞·ª£ng",
      error: err.message,
    });
  }
};

// üóë Xo√° to√†n b·ªô gi·ªè h√†ng
const clearCart = async (req, res) => {
  try {
    console.log("üì• clearCart API ƒë∆∞·ª£c g·ªçi b·ªüi user:", req.user?.id);

    if (!req.user || !req.user.id) {
      return res
        .status(401)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const userId = req.user.id;
    let cart = await Cart.findOne({ userId });

    if (!cart) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    cart.items = [];
    cart.total = 0;
    await cart.save();

    console.log("üõí Gi·ªè h√†ng sau khi clear:", cart);

    res.json({ message: "ƒê√£ xo√° to√†n b·ªô gi·ªè h√†ng th√†nh c√¥ng", cart });
  } catch (err) {
    console.error("‚ùå L·ªói clearCart:", err);
    res
      .status(500)
      .json({ message: "L·ªói server khi xo√° gi·ªè h√†ng", error: err.message });
  }
};

// ‚úÖ H√†m t√≠nh t·ªïng
const calculateCartTotal = (items) => {
  return items.reduce((sum, item) => {
    const price = Number(item.price) || 0;
    const qty = Number(item.quantity) || 0;
    return sum + price * qty;
  }, 0);
};

module.exports = {
  addToCart,
  getCart,
  removeFromCart,
  decreaseFromCart,
  clearCart,
};
