const Cart = require("../model/cart");
const { product: Product, productsell: ProductSell } = require("../model/model");

// ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè
// paste nguy√™n h√†m v√†o file controller c·ªßa b·∫°n, thay th·∫ø phi√™n b·∫£n c≈©
const addToCart = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p" });
    }
    const userId = req.user.id;
    const { productId, size, color, quantity } = req.body;

    if (!productId) {
      return res.status(400).json({ message: "Thi·∫øu productId" });
    }
    const qty = parseInt(quantity, 10) || 1;
    if (qty <= 0) return res.status(400).json({ message: "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá" });

    // l·∫•y cart ho·∫∑c t·∫°o m·ªõi
    let cart = await Cart.findOne({ userId });
    if (!cart) cart = new Cart({ userId, items: [], total: 0 });

    // L·∫•y product: t√¨m trong product tr∆∞·ªõc, n·∫øu kh√¥ng c√≥ -> productsell
    let productData = await Product.findById(productId).lean();
    let isSell = false;
    if (!productData) {
      productData = await ProductSell.findById(productId).lean();
      if (productData) isSell = true;
    }

    if (!productData) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    // x√°c ƒë·ªãnh c√≥ variants kh√¥ng
    const hasVariants = Array.isArray(productData.variants) && productData.variants.length > 0;

    let chosenColor = color || null;
    let chosenSize = size || null;
    let price = null;

    if (hasVariants) {
      // n·∫øu c√≥ variants th√¨ c·∫ßn color (v√† size n·∫øu product c√≥ size)
      if (!color) {
        return res.status(400).json({ message: "Vui l√≤ng ch·ªçn m√†u" });
      }

      // t√¨m variant: n·∫øu variant c√≥ size -> so size+color, n·∫øu kh√¥ng c√≥ size -> so color
      const variant = productData.variants.find((v) => {
        if (v.size !== undefined && v.size !== null && String(v.size).trim() !== "") {
          return String(v.size) === String(size) && String(v.color) === String(color);
        }
        return String(v.color) === String(color);
      });

      if (!variant) {
        return res.status(400).json({ message: "Bi·∫øn th·ªÉ kh√¥ng t·ªìn t·∫°i" });
      }

      if (variant.price === undefined || variant.price === null) {
        return res.status(400).json({ message: "Bi·∫øn th·ªÉ ch∆∞a c√≥ gi√° b√°n" });
      }

      price = Number(variant.price);
      chosenColor = variant.color || chosenColor;
      chosenSize = variant.size || chosenSize;
    } else {
      // kh√¥ng c√≥ variants: l·∫•y price t·ª´ document (productsell c√≥ th·ªÉ l∆∞u price ·ªü root)
      price = Number(productData.price ?? productData.priceold ?? 0);
      // n·∫øu kh√¥ng c√≥ price r√µ r√†ng, b√°o l·ªói
      if (!price || price <= 0) {
        return res.status(400).json({ message: "S·∫£n ph·∫©m ch∆∞a c√≥ gi√° b√°n" });
      }
      // gi·ªØ color/size n·∫øu FE g·ª≠i (kh√¥ng b·∫Øt bu·ªôc)
      chosenColor = color || null;
      chosenSize = size || null;
    }

    // t√¨m item ƒë√£ t·ªìn t·∫°i (ch√∫ √Ω item.productId c√≥ th·ªÉ l√† ObjectId ho·∫∑c object populated)
    const existing = cart.items.find((item) => {
      // l·∫•y id string an to√†n
      const itemPid = item.productId && item.productId._id ? item.productId._id.toString() : (item.productId && item.productId.toString ? item.productId.toString() : null);
      const itemColor = item.color || null;
      const itemSize = item.size || null;
      return itemPid === productId && itemColor === (chosenColor || null) && itemSize === (chosenSize || null);
    });

    if (existing) {
      existing.quantity += qty;
      existing.price = price;
      if (existing.quantity <= 0) cart.items = cart.items.filter((i) => i !== existing);
    } else {
      cart.items.push({
        productId,
        size: chosenSize,
        color: chosenColor,
        quantity: qty,
        price,
      });
    }

    cart.total = calculateCartTotal(cart.items);
    await cart.save();

    // c·ªë g·∫Øng populate ƒë·ªÉ FE nh·∫≠n ƒë∆∞·ª£c th√¥ng tin product, n·∫øu populate l·ªói => tr·∫£ cart th√¥
    let populated = null;
    try {
      populated = await Cart.findById(cart._id).populate("items.productId");
    } catch (popErr) {
      console.error("Populate failed (non-fatal):", popErr.stack || popErr);
    }

    res.status(201).json(populated || cart);
  } catch (err) {
    // in full stack cho b·∫°n xem ·ªü server logs (Render)
    console.error("‚ùå addToCart error:", err.stack || err);
    res.status(500).json({ message: "L·ªói server khi th√™m gi·ªè h√†ng", error: err.message });
  }
};


// üì¶ L·∫•y gi·ªè h√†ng
const getCart = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res
        .status(401)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const userId = req.user.id;
    const cart = await Cart.findOne({ userId }).populate("items.productId");
    if (!cart) return res.json({ items: [], total: 0 });

    res.json(cart);
  } catch (err) {
    console.error("‚ùå L·ªói getCart:", err);
    res
      .status(500)
      .json({ message: "L·ªói server khi l·∫•y gi·ªè h√†ng", error: err.message });
  }
};

// ‚ùå Xo√° s·∫£n ph·∫©m
const removeFromCart = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res
        .status(401)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const userId = req.user.id;
    const { productId, size, color } = req.body;

    let cart = await Cart.findOne({ userId });
    if (!cart) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    cart.items = cart.items.filter(
      (item) =>
        !(
          item.productId.toString() === productId &&
          (item.color || null) === (color || null) &&
          (item.size || null) === (size || null)
        )
    );

    cart.total = calculateCartTotal(cart.items);
    await cart.save();

    const populated = await Cart.findById(cart._id).populate("items.productId");
    res.json(populated || { items: [], total: 0 });
  } catch (err) {
    console.error("‚ùå L·ªói removeFromCart:", err);
    res
      .status(500)
      .json({ message: "L·ªói server khi xo√° s·∫£n ph·∫©m", error: err.message });
  }
};

// ‚ûñ Gi·∫£m s·ªë l∆∞·ª£ng
const decreaseFromCart = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res
        .status(401)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const userId = req.user.id;
    const { productId, size, color } = req.body;

    let cart = await Cart.findOne({ userId }).populate("items.productId");
    if (!cart) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });

    const itemIndex = cart.items.findIndex(
      (item) =>
        item.productId._id.toString() === productId &&
        (item.color || null) === (color || null) &&
        (item.size || null) === (size || null)
    );

    if (itemIndex === -1) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè" });
    }

    if (cart.items[itemIndex].quantity > 1) {
      cart.items[itemIndex].quantity -= 1;
    } else {
      cart.items.splice(itemIndex, 1);
    }

    cart.total = calculateCartTotal(cart.items);
    await cart.save();

    const populated = await Cart.findById(cart._id).populate("items.productId");
    res.json(populated || { items: [], total: 0 });
  } catch (err) {
    console.error("‚ùå L·ªói decreaseFromCart:", err);
    res.status(500).json({
      message: "L·ªói server khi gi·∫£m s·ªë l∆∞·ª£ng",
      error: err.message,
    });
  }
};

// üóë Xo√° to√†n b·ªô gi·ªè h√†ng
const clearCart = async (req, res) => {
  try {
    console.log("üì• clearCart API ƒë∆∞·ª£c g·ªçi b·ªüi user:", req.user?.id);

    if (!req.user || !req.user.id) {
      return res
        .status(401)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const userId = req.user.id;
    let cart = await Cart.findOne({ userId });

    if (!cart) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    cart.items = [];
    cart.total = 0;
    await cart.save();

    console.log("üõí Gi·ªè h√†ng sau khi clear:", cart);

    res.json({ message: "ƒê√£ xo√° to√†n b·ªô gi·ªè h√†ng th√†nh c√¥ng", cart });
  } catch (err) {
    console.error("‚ùå L·ªói clearCart:", err);
    res
      .status(500)
      .json({ message: "L·ªói server khi xo√° gi·ªè h√†ng", error: err.message });
  }
};

// ‚úÖ H√†m t√≠nh t·ªïng
const calculateCartTotal = (items) => {
  return items.reduce((sum, item) => {
    const price = Number(item.price) || 0;
    const qty = Number(item.quantity) || 0;
    return sum + price * qty;
  }, 0);
};

module.exports = {
  addToCart,
  getCart,
  removeFromCart,
  decreaseFromCart,
  clearCart,
};
