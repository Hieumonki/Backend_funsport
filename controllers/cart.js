const mongoose = require("mongoose");
const Cart = require("../model/cart");
const Product = require("../model/model"); // model Product

// üßÆ H√†m t√≠nh t·ªïng gi·ªè
const calculateCartTotal = async (items) => {
  let total = 0;
  for (const item of items) {
    const product = await Product.findById(item.productId);
    if (product) {
      total += product.price * item.quantity;
    }
  }
  return total;
};

// ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè
const addToCart = async (req, res) => {
  console.log("üëâ req.user:", req.user);
console.log("üëâ req.body:", req.body);

  try {
    // ‚úÖ Ki·ªÉm tra token
    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá" });
    }
    const userId = req.user.id;

    // ‚úÖ L·∫•y d·ªØ li·ªáu body
    const { productId, size, color, quantity } = req.body;

    if (!productId) {
      return res.status(400).json({ message: "productId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }
    if (!mongoose.Types.ObjectId.isValid(productId)) {
      return res.status(400).json({ message: "productId kh√¥ng h·ª£p l·ªá" });
    }
    if (!size || !color) {
      return res.status(400).json({ message: "Vui l√≤ng ch·ªçn size v√† m√†u" });
    }

    // ‚úÖ T√¨m gi·ªè h√†ng c·ªßa user
    let cart = await Cart.findOne({ userId });
    if (!cart) {
      cart = new Cart({ userId, items: [], total: 0 });
    }

    // ‚úÖ Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè ch∆∞a
    const existing = cart.items.find(
      (item) =>
        item.productId.toString() === productId &&
        item.size === size &&
        item.color === color
    );

    if (existing) {
      existing.quantity += quantity || 1;
    } else {
      cart.items.push({ 
        productId, 
        size, 
        color, 
        quantity: quantity > 0 ? quantity : 1 
      });
    }

    // ‚úÖ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
    cart.total = await calculateCartTotal(cart.items);
    await cart.save();

    // ‚úÖ Populate product ƒë·ªÉ tr·∫£ v·ªÅ cho FE
    const populated = await Cart.findById(cart._id).populate("items.productId");
    res.status(201).json(populated);

  } catch (err) {
    console.error("‚ùå L·ªói addToCart:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

// üì¶ L·∫•y gi·ªè h√†ng c·ªßa user
const getCart = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá" });
    }

    const userId = req.user.id;
    const cart = await Cart.findOne({ userId }).populate("items.productId");

    res.json(cart || { items: [], total: 0 });
  } catch (err) {
    console.error("‚ùå L·ªói getCart:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

// ‚ùå Xo√° 1 s·∫£n ph·∫©m kh·ªèi gi·ªè
const removeFromCart = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá" });
    }

    const userId = req.user.id;
    const { productId, size, color } = req.body;

    if (!productId) {
      return res.status(400).json({ message: "productId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }
    if (!mongoose.Types.ObjectId.isValid(productId)) {
      return res.status(400).json({ message: "productId kh√¥ng h·ª£p l·ªá" });
    }

    let cart = await Cart.findOne({ userId });
    if (!cart) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });

    cart.items = cart.items.filter(
      (item) =>
        !(
          item.productId.toString() === productId &&
          item.size === size &&
          item.color === color
        )
    );

    cart.total = await calculateCartTotal(cart.items);
    await cart.save();

    const populated = await Cart.findById(cart._id).populate("items.productId");
    res.json(populated);

  } catch (err) {
    console.error("‚ùå L·ªói removeFromCart:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

module.exports = { addToCart, getCart, removeFromCart };
