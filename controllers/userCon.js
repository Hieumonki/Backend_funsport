const { account, theme } = require("../model/model");
const bcrypt = require("bcryptjs");

const userCon = {
  // üìå L·∫•y to√†n b·ªô user
  getUser: async (req, res) => {
    try {
      const users = await account.find().populate("products");
      res.status(200).json(users);
    } catch (error) {
      res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng", error });
    }
  },

  // üìå L·∫•y 1 user theo id
  getAnUser: async (req, res) => {
    try {
      const user = await account.findById(req.params.id).populate("products");
      if (!user) return res.status(404).json("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
      res.status(200).json(user);
    } catch (error) {
      res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng", error });
    }
  },

  // üìå Update user (admin ho·∫∑c update ng∆∞·ªùi kh√°c)
  updateUser: async (req, res) => {
    try {
      const updated = await account.findByIdAndUpdate(
        req.params.id,
        { $set: req.body },
        { new: true }
      );
      res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user: updated });
    } catch (error) {
      res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t", error });
    }
  },

  // üìå Xo√° 1 user
  deleteUser: async (req, res) => {
    try {
      const user = await account.findById(req.params.id);
      if (!user) return res.status(404).json("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");

      // Xo√° to√†n b·ªô theme c·ªßa user n·∫øu c√≥
      await theme.deleteMany({ author: user._id });

      await account.findByIdAndDelete(req.params.id);
      res.status(200).json("Xo√° th√†nh c√¥ng");
    } catch (error) {
      res.status(500).json({ message: "L·ªói khi xo√°", error });
    }
  },

  // üìå Xo√° nhi·ªÅu user
  deleteUsers: async (req, res) => {
    try {
      const { userIds } = req.body;
      await Promise.all(userIds.map(async (id) => {
        await theme.deleteMany({ author: id });
        await account.findByIdAndDelete(id);
      }));
      res.status(200).json("Xo√° nhi·ªÅu ng∆∞·ªùi d√πng th√†nh c√¥ng");
    } catch (error) {
      res.status(500).json({ message: "L·ªói khi xo√° nhi·ªÅu ng∆∞·ªùi d√πng", error });
    }
  },

  // üìä Th·ªëng k√™ user
  getUserStats: async (req, res) => {
    try {
      const users = await account.find();
      const stats = {
        totalUsers: users.length,
        activeUsers: users.filter(u => u?.status === "active").length,
        lockedUsers: users.filter(u => u?.status === "locked").length,
        pendingUsers: users.filter(u => u?.status === "pending").length,
        totalViolations: users.reduce((acc, user) => {
          const spam = user?.spamCount ?? 0;
          const cancel = user?.cancellationCount ?? 0;
          const ghost = user?.ghostingCount ?? 0;
          return acc + spam + cancel + ghost;
        }, 0)
      };

      res.status(200).json(stats);
    } catch (error) {
      res.status(500).json({ message: "L·ªói khi l·∫•y th·ªëng k√™", error });
    }
  },

  // üìå Kho√° / m·ªü kho√° user
  toggleLockUser: async (req, res) => {
    try {
      const { lockReason } = req.body;
      const user = await account.findById(req.params.id);
      if (!user) return res.status(404).json("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");

      const newStatus = user.status === "locked" ? "active" : "locked";
      user.status = newStatus;
      user.lockReason = newStatus === "locked" ? lockReason : null;
      await user.save();

      res.status(200).json(user);
    } catch (error) {
      res.status(500).json({ message: "L·ªói khi kho√°/m·ªü kho√°", error });
    }
  },

  // üìå Kho√° / m·ªü kho√° product c·ªßa user
  toggleProductLock: async (req, res) => {
    try {
      const { productId } = req.body;
      const user = await account.findById(req.params.id);
      if (!user) return res.status(404).json("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");

      if (!user.products) user.products = [];

      const hasProduct = user.products.includes(productId);
      if (hasProduct) {
        user.products = user.products.filter(p => p.toString() !== productId);
      } else {
        user.products.push(productId);
      }

      await user.save();
      res.status(200).json(user);
    } catch (error) {
      res.status(500).json({ message: "L·ªói khi kho√°/m·ªü kho√° s·∫£n ph·∫©m", error });
    }
  },

  // üìå L·∫•y th√¥ng tin c√° nh√¢n user ƒëang ƒëƒÉng nh·∫≠p
  getMe: async (req, res) => {
    try {
      const user = await account.findById(req.user.id).select("-password");
      if (!user) return res.status(404).json("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
      res.status(200).json(user);
    } catch (error) {
      res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng", error });
    }
  },

  // üìå Update th√¥ng tin c√° nh√¢n user
  updateMe: async (req, res) => {
    try {
      const updatedUser = await account.findByIdAndUpdate(
        req.user.id,
        { $set: req.body },
        { new: true }
      ).select("-password");
      res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user: updatedUser });
    } catch (error) {
      res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t", error });
    }
  },

  // üìå ƒê·ªïi m·∫≠t kh·∫©u
changePassword: async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body;
    if (!oldPassword || !newPassword) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u" });
    }

    const user = await account.findById(req.user.id);
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng" });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.status(200).json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u", error });
  }
},

  // üìå B√°o c√°o vi ph·∫°m
  reportViolation: async (req, res) => {
    try {
      const { violationType } = req.body;
      const user = await account.findById(req.params.id);
      if (!user) return res.status(404).json("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");

      switch (violationType) {
        case "spam":
          user.spamCount = (user.spamCount || 0) + 1;
          break;
        case "cancellation":
          user.cancellationCount = (user.cancellationCount || 0) + 1;
          break;
        case "ghosting":
          user.ghostingCount = (user.ghostingCount || 0) + 1;
          break;
        default:
          return res.status(400).json("Lo·∫°i vi ph·∫°m kh√¥ng h·ª£p l·ªá");
      }

      await user.save();
      res.status(200).json(user);
    } catch (error) {
      res.status(500).json({ message: "L·ªói khi b√°o c√°o vi ph·∫°m", error });
    }
  },
};

module.exports = userCon;
